name: Papiloom CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      # Use mongodb-memory-server instead of actual MongoDB
      # for faster and more isolated testing

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Install dependencies
        run: |
          npm ci
          cd client && npm ci --legacy-peer-deps
          cd ../server && npm ci

      - name: Run tests
        run: |
          cd server && NODE_ENV=test USE_IN_MEMORY_DB=true npm test
        env:
          JWT_KEY: ${{ secrets.JWT_KEY || 'test_jwt_key' }}
          JWT_EXPIRATION: 7d
          JWT_EXPIRATION_DAYS: 7
          NODE_ENV: test
          USE_IN_MEMORY_DB: true
          VUE_APP_BASE_URL_DEV: http://localhost:8080

      - name: Generate test coverage
        run: |
          cd server && NODE_ENV=test USE_IN_MEMORY_DB=true npm run test:coverage
        env:
          JWT_KEY: ${{ secrets.JWT_KEY || 'test_jwt_key' }}
          JWT_EXPIRATION: 7d
          JWT_EXPIRATION_DAYS: 7
          NODE_ENV: test
          USE_IN_MEMORY_DB: true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/papiloom:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/papiloom:${{ github.sha }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to production
        # This step would typically use SSH to connect to your production server
        # and deploy the latest version
        run: |
          echo "Deploying to production server"
          # Add your deployment commands here
          # For example, using SSH to pull the latest Docker image and restart the container

          # Example (commented out):
          # ssh ${{ secrets.PRODUCTION_SERVER_USER }}@${{ secrets.PRODUCTION_SERVER_HOST }} \
          #   "docker pull ${{ secrets.DOCKERHUB_USERNAME }}/papiloom:latest && \
          #    docker-compose -f /path/to/docker-compose.yml up -d --force-recreate papiloom-prod"
